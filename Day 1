As an asynchronous event driven JavaScript runtime, Node.js is designed to build scalable network applications. In the following "hello world" example, many connections can be handled concurrently. Upon each connection the callback is fired, but if there is no work to be done, Node.js will sleep.
const http = require('http');

const hostname = '127.0.0.1';

const port = 3000;

const server = http.createServer((req, res) => {

  res.statusCode = 200;

  res.setHeader('Content-Type', 'text/plain');

  res.end('Hello World\n');

});

server.listen(port, hostname, () => {

  console.log(`Server running at http://${hostname}:${port}/`);

});

Node.js is similar in design to, and influenced by, systems like Ruby's Event Machine or Python's Twisted. Node.js takes the event model a bit further. It presents an event loop as a runtime construct instead of as a library. 
In other systems there is always a blocking call to start the event-loop. Typically behavior is defined through callbacks at the beginning of a script and at the end starts a server through a blocking call like EventMachine::run(). 
In Node.js there is no such start-the-event-loop call. Node.js simply enters the event loop after executing the input script. 
Node.js exits the event loop when there are no more callbacks to perform. This behavior is like browser JavaScript — the event loop is hidden from the user.

HTTP is a first class citizen in Node.js, designed with streaming and low latency in mind. This makes Node.js well suited for the foundation of a web library or framework.

Just because Node.js is designed without threads, doesn't mean you cannot take advantage of multiple cores in your environment. Child processes can be spawned by using our child_process.fork() API, and are designed to be easy to communicate with. 
Built upon that same interface is the cluster module, which allows you to share sockets between processes to enable load balancing over your cores.

 ## ECMAScript 2015 (ES6) and beyond
Node.js is built against modern versions of V8. By keeping up-to-date with the latest releases of this engine, we ensure new features from the JavaScript ECMA-262 specificationare brought to Node.js developers in a timely manner, as well as continued performance and stability improvements.

All ECMAScript 2015 (ES6) features are split into three groups for shipping, staged, and in progress features:

All shipping features, which V8 considers stable, are turned on by default on Node.jsand do NOT require any kind of runtime flag.
Staged features, which are almost-completed features that are not considered stable by the V8 team, require a runtime flag: --harmony.
In progress features can be activated individually by their respective harmony flag, although this is highly discouraged unless for testing purposes. Note: these flags are exposed by V8 and will potentially change without any deprecation notice.

Which features ship with which Node.js version by default?
The website node.green provides an excellent overview over supported ECMAScript features in various versions of Node.js, based on kangax's compat-table.



Which features are in progress?
New features are constantly being added to the V8 engine. Generally speaking, expect them to land on a future Node.js release, although timing is unknown.

You may list all the in progress features available on each Node.js release by grepping through the --v8-options argument. Please note that these are incomplete and possibly broken features of V8, so use them at your own risk:

node --v8-options | grep "in progress"

What about the performance of a particular feature?
The V8 team is constantly working to improve the performance of new language features to eventually reach parity with their transpiled or native counterparts in EcmaScript 5 and earlier. The current progress there is tracked on the website six-speed, which shows the performance of ES2015 and ESNext features compared to their native ES5 counterparts.

The work on optimizing features introduced with ES2015 and beyond is coordinated via a performance plan, where the V8 team gathers and coordinates areas that need improvement, and design documents to tackle those problems.

## Activity 3 question and answers.

Node.js is an open-source, cross-platform JavaScript runtime environment that allows developers to run JavaScript code outside of a web browser. 
It is built on Chrome's V8 JavaScript engine and provides a way to execute server-side JavaScript, enabling the development of scalable and high-performance network applications.
 is initiated on a computer by running JavaScript code using the Node.js runtime. You can create a JavaScript file with your code (for example, app.js) and run it through the Node.js interpreter in the command line by typing node app.js. 
This will execute the code in the app.js file using Node.js.
## how is NODE JS initiated on computer

Node.js is initiated on a computer by running JavaScript code using the Node.js runtime. 

########################################################################################################################
Node Package Manager) is a package manager for the Node JavaScript platform. It consists of an npm registry that enables Open-Source developers to publish and share their code. You might need to install a few packages to streamline your project. Packages contain code written by other developers. Our root project has a package.json file that keeps track of all the packages we’ve installed. This file contains information about the project and defines the attributes that npm uses for installing dependencies, running scripts, and identifying the entry point for the package.

The different types of dependencies are:  
Production Dependencies
Development Dependencies
Peer Dependencies
Optional Dependencies
Bundled Dependencies

 Dependencies are libraries on which the project relies to function effectively. 

1. PRODUCTION DEPENDENCIES: 

Production dependencies are fundamental dependencies that are required to complete the project. Package.json specifies these dependencies under the key “dependencies”. These are the packages used in the project code. If a package doesn’t already exist in the node_modules directory, then it is automatically added. These are the libraries you need when you run your code. For example, To run a react project, you need react-dom. In our production dependencies, you will find the express package we just installed. 

2. DEVELOPMENT DEPENDENCIES: 

As a developer, you may want to install dependencies to build and test your website. The packages required by a developer during development are called devDependencies. Dependencies that you might need at some point in the development process, but not during execution. They are not included in the production version and will not be downloaded to end user’s browser caches. For example, Nodemon, lodash, Babel etc.

Note: Nodemon helps developers create node.js applications by automatically restarting the node application when a file change is detected in the directory.

Adding dev dependency: By using the following command, let’s add nodemon as a dev dependency.
3. PEER DEPENDENCIES:

The only time you would encounter peer dependencies is if you were publishing your own package ie, when you develop a code that will be used by other programs. Libraries use peerDependencies to tell developers which other libraries with the exact version they will need to install in their own websites to use your library. Therefore, peer dependencies also express compatibility. The peerDependencies ensure that the code is compatible with the version of the package installed. peerDependencies are not automatically installed. You need to manually modify your package.json file in order to add a Peer Dependency.

For packages like react, this will ensure that there is a single copy of react-dom which is also used by the person installing the package. Even though the package relies on React, it has no direct dependency. Things such as React and React-dom are required, but not installed.

######################################################################################################################################END######################################################################################

